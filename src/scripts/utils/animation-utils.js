/**\n * Animation utility functions for the application\n */\n\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { select, selectAll } from './dom';\n\n// Register GSAP plugins\ngsap.registerPlugin(ScrollTrigger);\n\n/**\n * Initialize GSAP\n */\nexport function initGSAP() {\n  // Default easing\n  gsap.defaults({\n    ease: 'power3.out',\n    duration: 1\n  });\n}\n\n/**\n * Create scroll progress indicator\n * @param {HTMLElement} element - The element to use as the progress indicator\n * @param {Object} options - Options for the progress indicator\n * @param {string} options.direction - Direction of the progress indicator (horizontal or vertical)\n * @param {string} options.color - Color of the progress indicator\n */\nexport function createScrollProgress(element, options = {}) {\n  const { direction = 'horizontal', color = 'var(--color-primary)' } = options;\n  \n  // Set initial styles\n  gsap.set(element, {\n    position: 'fixed',\n    top: direction === 'horizontal' ? 0 : 'auto',\n    left: direction === 'vertical' ? 0 : 'auto',\n    bottom: direction === 'vertical' ? 'auto' : 0,\n    right: 'auto',\n    width: direction === 'horizontal' ? 0 : '4px',\n    height: direction === 'vertical' ? 0 : '4px',\n    backgroundColor: color,\n    zIndex: 9999\n  });\n  \n  // Create scroll trigger\n  ScrollTrigger.create({\n    start: 'top top',\n    end: 'bottom bottom',\n    onUpdate: (self) => {\n      if (direction === 'horizontal') {\n        gsap.to(element, {\n          width: `${self.progress * 100}%`,\n          duration: 0.1,\n          ease: 'none'\n        });\n      } else {\n        gsap.to(element, {\n          height: `${self.progress * 100}%`,\n          duration: 0.1,\n          ease: 'none'\n        });\n      }\n    }\n  });\n}\n\n/**\n * Animate fade in\n * @param {HTMLElement} element - The element to animate\n * @param {Object} options - Animation options\n */\nexport function animateFadeIn(element, options = {}) {\n  const {\n    y = 30,\n    duration = 1,\n    delay = 0,\n    stagger = 0,\n    scrollTrigger = null\n  } = options;\n  \n  const animation = {\n    opacity: 0,\n    y,\n    duration,\n    stagger,\n    delay,\n    clearProps: 'transform'\n  };\n  \n  if (scrollTrigger) {\n    animation.scrollTrigger = {\n      trigger: scrollTrigger.trigger || element,\n      start: scrollTrigger.start || 'top 80%',\n      toggleActions: scrollTrigger.toggleActions || 'play none none none',\n      ...scrollTrigger\n    };\n  }\n  \n  return gsap.from(element, animation);\n}\n\n/**\n * Create 3D card effect on hover\n * @param {HTMLElement} element - The element to apply the effect to\n * @param {Object} options - Options for the 3D effect\n */\nexport function create3DCardEffect(element, options = {}) {\n  if (!element) return;\n\n  const {\n    perspective = 1000,\n    max = 15,\n    scale = 1,\n    speed = 500,\n    easing = 'cubic-bezier(.03,.98,.52,.99)',\n    disableOnMobile = true\n  } = options;\n\n  // Don't apply effect on mobile if disabled\n  if (disableOnMobile && window.innerWidth < 768) return;\n\n  // Set initial styles\n  element.style.transformStyle = 'preserve-3d';\n  element.style.transition = `transform ${speed}ms ${easing}`;\n  element.style.transform = `perspective(${perspective}px) rotateX(0deg) rotateY(0deg) scale3d(${scale}, ${scale}, ${scale})`;\n\n  // Add event listeners\n  element.addEventListener('mousemove', handleMouseMove);\n  element.addEventListener('mouseleave', handleMouseLeave);\n  element.addEventListener('mouseenter', handleMouseEnter);\n\n  // Mouse move handler\n  function handleMouseMove(e) {\n    const rect = element.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    const mouseX = e.clientX - centerX;\n    const mouseY = e.clientY - centerY;\n    \n    const rotateY = (max * mouseX) / (rect.width / 2);\n    const rotateX = (-max * mouseY) / (rect.height / 2);\n    \n    element.style.transform = `perspective(${perspective}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(${scale}, ${scale}, ${scale})`;\n  }\n\n  // Mouse leave handler\n  function handleMouseLeave() {\n    element.style.transform = `perspective(${perspective}px) rotateX(0deg) rotateY(0deg) scale3d(${scale}, ${scale}, ${scale})`;\n  }\n\n  // Mouse enter handler\n  function handleMouseEnter() {\n    element.style.transition = `transform ${speed}ms ${easing}`;\n    setTimeout(() => {\n      element.style.transition = '';\n    }, speed);\n  }\n\n  // Return cleanup function\n  return {\n    dispose: () => {\n      element.removeEventListener('mousemove', handleMouseMove);\n      element.removeEventListener('mouseleave', handleMouseLeave);\n      element.removeEventListener('mouseenter', handleMouseEnter);\n      element.style.transform = '';\n      element.style.transition = '';\n      element.style.transformStyle = '';\n    }\n  };\n}\n\n/**\n * Create smooth scroll to section\n * @param {HTMLElement} element - The element to click for scrolling\n * @param {string} targetSelector - The target selector to scroll to\n * @param {Object} options - Options for the scroll action\n */\nexport function createScrollToAction(element, targetSelector, options = {}) {\n  if (!element) return;\n\n  const {\n    duration = 1,\n    ease = 'power3.out',\n    offset = 0,\n    onComplete = null\n  } = options;\n\n  element.addEventListener('click', (e) => {\n    e.preventDefault();\n    \n    const target = document.querySelector(targetSelector);\n    if (!target) return;\n    \n    const targetPosition = target.getBoundingClientRect().top + window.pageYOffset + offset;\n    \n    gsap.to(window, {\n      duration,\n      scrollTo: targetPosition,\n      ease,\n      onComplete\n    });\n  });\n}\n\n/**\n * Create portfolio grid animation\n * @param {HTMLElement} grid - The portfolio grid element\n */\nexport function createPortfolioGridAnimation(grid) {\n  if (!grid) return;\n  \n  const items = grid.querySelectorAll('.portfolio-item');\n  \n  ScrollTrigger.create({\n    trigger: grid,\n    start: 'top 80%',\n    onEnter: () => {\n      gsap.from(items, {\n        opacity: 0,\n        y: 50,\n        scale: 0.9,\n        stagger: 0.1,\n        duration: 0.8,\n        ease: 'power3.out',\n        clearProps: 'transform'\n      });\n    },\n    once: true\n  });\n}\n\n/**\n * Create testimonial carousel animation\n * @param {HTMLElement} carousel - The carousel element\n */\nexport function createTestimonialCarouselAnimation(carousel) {\n  if (!carousel) return;\n  \n  const slides = carousel.querySelectorAll('.testimonial-slide');\n  \n  // Set initial state\n  gsap.set(slides, {\n    opacity: 0,\n    y: 30\n  });\n  \n  // Set first slide as active\n  if (slides.length > 0) {\n    slides[0].classList.add('active');\n    \n    gsap.to(slides[0], {\n      opacity: 1,\n      y: 0,\n      duration: 0.8,\n      ease: 'power3.out'\n    });\n  }\n}\n\n/**\n * Create statistics counter animation\n * @param {HTMLElement} container - The statistics container element\n * @param {Array} statistics - The statistics data\n */\nexport function createStatisticsCounterAnimation(container, statistics) {\n  if (!container) return;\n  \n  const statItems = container.querySelectorAll('.statistic-value');\n  \n  ScrollTrigger.create({\n    trigger: container,\n    start: 'top 80%',\n    onEnter: () => {\n      statItems.forEach((item, index) => {\n        const value = parseInt(item.dataset.value, 10);\n        const prefix = item.dataset.prefix || '';\n        const suffix = item.dataset.suffix || '';\n        const duration = statistics[index]?.duration || 2;\n        \n        gsap.to(item, {\n          innerText: value,\n          duration,\n          ease: 'power2.out',\n          snap: { innerText: 1 },\n          onUpdate: () => {\n            item.innerHTML = `${prefix}${Math.floor(item.innerText)}${suffix}`;\n          }\n        });\n      });\n    },\n    once: true\n  });\n}\n\n/**\n * Create team grid animation\n * @param {HTMLElement} grid - The team grid element\n */\nexport function createTeamGridAnimation(grid) {\n  if (!grid) return;\n  \n  const items = grid.querySelectorAll('.team-member');\n  \n  ScrollTrigger.create({\n    trigger: grid,\n    start: 'top 80%',\n    onEnter: () => {\n      gsap.from(items, {\n        opacity: 0,\n        y: 50,\n        scale: 0.9,\n        stagger: 0.1,\n        duration: 0.8,\n        ease: 'power3.out',\n        clearProps: 'transform'\n      });\n    },\n    once: true\n  });\n}